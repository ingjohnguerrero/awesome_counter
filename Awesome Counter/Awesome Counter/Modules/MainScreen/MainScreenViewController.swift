//
//  MainScreenViewController.swift
//  Awesome Counter
//
//  Created by John Guerrero on 2/12/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class MainScreenViewController: UIViewController {

    // MARK: - IBOutlets -

    @IBOutlet weak var editButton: UIBarButtonItem!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet var dataProvider: (
                                    UITableViewDataSource &
                                    UITableViewDelegate &
                                    ItemManagerSettable &
                                    SearchableDataProvider
                                )!
    @IBOutlet weak var activityIndicatorView: UIActivityIndicatorView!
    @IBOutlet weak var emptyView: UIView!
    @IBOutlet weak var errorView: UIView!
    @IBOutlet weak var addButton: UIButton!
    @IBOutlet weak var countersInformationLabel: UILabel!

    // MARK: - Public properties -

    var presenter: MainScreenPresenterInterface!
    var itemManager: CounterItemManager?
    var searchController = UISearchController(searchResultsController: nil)
    lazy var searchBar: UISearchBar! = searchController.searchBar

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
        setupNavigationBar()
        registerTableViewCells()
        configureRefreshControl()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        presenter.viewDidAppear()
    }

    fileprivate func setupItemManager() {
        dataProvider.itemManager = itemManager
    }

    fileprivate func setTableViewDataProvider() {
        tableView.dataSource = dataProvider
        tableView.delegate = dataProvider

        setupItemManager()
    }

    @IBAction func onAddButtonTapped(_ sender: Any) {
        presenter.presentAddItemModule()
    }

    @IBAction func onEmptyViewButtonTapped(_ sender: Any) {
        presenter.presentAddItemModule()
    }

    @IBAction func onRetryButtonTapped(_ sender: Any) {
        presenter.loadCounters()
    }
}

// MARK: - Extensions -

extension MainScreenViewController: MainScreenViewInterface {

    func setErrorView() {
        tableView.isHidden = true
        emptyView.isHidden = true
        errorView.isHidden = false
    }

    func setContentView() {
        defer {
            updateCountersInformation()
        }
        tableView.reloadData()
        tableView.isHidden = false
        emptyView.isHidden = true
        errorView.isHidden = true
    }

    func startLoading() {
        activityIndicatorView.startAnimating()
        tableView.isHidden = true
        emptyView.isHidden = true
        errorView.isHidden = true
    }

    func finishLoading() {
        activityIndicatorView.stopAnimating()
    }

    func setEmptyView() {
        tableView.isHidden = true
        emptyView.isHidden = false
        errorView.isHidden = true
        countersInformationLabel.text = " ·êß "
    }

    func setItemManager(_ itemManager: CounterItemManager) {
        self.itemManager = itemManager
        setTableViewDataProvider()
    }

    func updateCountersInformation() {
        countersInformationLabel.text = itemManager?.countersInformation ?? " ·êß "
    }

    func endTableViewRefreshing() {
        DispatchQueue.main.async { [weak self] in
            self?.tableView.refreshControl?.endRefreshing()
        }
    }

    func reloadTableView() {
        tableView.reloadData()
    }
}

extension MainScreenViewController {

    func registerTableViewCells() {
        tableView.register(
            UINib(nibName: "CounterTableViewCell", bundle: nil),
            forCellReuseIdentifier: "CounterTableViewCell"
        )
    }

    func setupNavigationBar() {
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.largeTitleDisplayMode = .automatic
        navigationItem.searchController = searchController

        searchController.searchBar.delegate = self
        searchController.searchBar.tintColor = UIColor(named: "secondaryLabel")
    }

    func configureRefreshControl () {
       // Add the refresh control to your UIScrollView object.
       tableView.refreshControl = UIRefreshControl()
       tableView.refreshControl?.addTarget(self, action:
                                          #selector(handleRefreshControl),
                                          for: .valueChanged)
    }

    @objc func handleRefreshControl() {
        presenter.refreshCounters()
    }
}

extension MainScreenViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        dataProvider.updateSearchTerm(searchText)
        tableView.reloadData()
    }
}
