//
//  MainScreenInteractor.swift
//  Awesome Counter
//
//  Created by John Guerrero on 2/12/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import Alamofire

final class MainScreenInteractor {
    let environment = APIEnvironments.production
    lazy var context = DevelopmentAPIContext(environment: environment)
    lazy var reachabilityManager = NetworkReachabilityManager(host: "www.google.com")
    lazy var counterService: CounterService! = AlamofireCounterService(context: context)
    lazy var coreDataCounterService = CoreDataCounterService(baseService: counterService)
    var currentNetworkStatus: NetworkReachabilityManager.NetworkReachabilityStatus {
        reachabilityManager?.status ?? .notReachable
    }
    var isNotReachable: Bool {
        currentNetworkStatus == .notReachable
    }
}

// MARK: - Extensions -

extension MainScreenInteractor: MainScreenInteractorInterface {

    func getCounters(completion: @escaping ([Counter], Error?) -> Void) {
        if isNotReachable {
            coreDataCounterService.getCountersDb(completion: completion)
        } else {
            coreDataCounterService.getCounters(completion: completion)
        }
    }

    func incrementCounter(byId id: String, completion: @escaping ([Counter], Error?) -> Void) {
        if isNotReachable {
            coreDataCounterService.incrementCounterDb(byId: id, completion: completion)
        } else {
            coreDataCounterService.incrementCounter(byId: id, completion: completion)
        }
    }

    func decrementCounter(byId id: String, completion: @escaping ([Counter], Error?) -> Void) {
        if isNotReachable {
            coreDataCounterService.decrementCounterDb(byId: id, completion: completion)
        } else {
            coreDataCounterService.decrementCounter(byId: id, completion: completion)
        }
    }

    func addCounter(title: String, completion: @escaping ([Counter], Error?) -> Void) {
        if isNotReachable {
            coreDataCounterService.createCounterDb(title: title, completion: completion)
        } else {
            coreDataCounterService.createCounter(title: title, completion: completion)
        }
    }

    func deleteCounter(byId id: String, completion: @escaping ([Counter], Error?) -> Void) {
        if isNotReachable {
            coreDataCounterService.deleteCounterDb(byId: id, completion: completion)
        } else {
            coreDataCounterService.deleteCounter(byId: id, completion: completion)
        }
    }

    func startNetworkMonitoring(
        onReachableClosure: @escaping (() -> Void),
        onNotReachableClosure: @escaping (() -> Void)
    ) {
        reachabilityManager?.startListening { status in
            DispatchQueue.main.async {
                switch status {
                case .notReachable:
                    onNotReachableClosure()
                case .reachable(.cellular), .reachable(.ethernetOrWiFi):
                    onReachableClosure()
                case .unknown:
                    print("Unknown network state")
                }
            }
        }
    }
}
